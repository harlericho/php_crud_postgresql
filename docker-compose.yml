services:
  # Servicio de PostgreSQL
  postgres:
    image: postgres:13-alpine
    container_name: php_crud_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: persona_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      # Volumen persistente para los datos
      - postgres_data:/var/lib/postgresql/data
      # Montar toda la carpeta de migraciones para inicialización automática
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - php_crud_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d persona_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Servicio opcional de pgAdmin para administrar la base de datos
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: php_crud_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - php_crud_network
    depends_on:
      - postgres

  # Servicio opcional de PHP (si quieres ejecutar la aplicación en Docker también)
  php_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: php_crud_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - .:/var/www/html
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: persona_db
      DB_USER: postgres
      DB_PASS: password
      APP_ENV: development
      APP_DEBUG: true
    networks:
      - php_crud_network
    depends_on:
      postgres:
        condition: service_healthy
    command: ["php", "-S", "0.0.0.0:8000", "-t", "public"]

# Volúmenes nombrados para persistencia de datos
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

# Red personalizada
networks:
  php_crud_network:
    driver: bridge
